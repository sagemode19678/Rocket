local offset = 1100
local invisible = game.Players.LocalPlayer
local grips = {}
local heldTool
local gripChanged
local handle
local weld

-- Function to set the display distance of names and health bars
function setDisplayDistance(distance)
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
            local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
            humanoid.NameDisplayDistance = distance
            humanoid.HealthDisplayDistance = distance
        end
    end
end

-- Creating the tool
local tool = Instance.new("Tool", game.Players.LocalPlayer.Backpack)
tool.Name = "Ghost"
tool.RequiresHandle = false
tool.CanBeDropped = false

-- Handling tool equip event
tool.Equipped:Connect(function()
    wait()
    if not invisible then
        invisible = true
        tool.Name = "Ghost: Enabled"
        
        -- Remove previous objects
        if handle then handle:Destroy() end
        if weld then weld:Destroy() end
        
        -- Create an invisible part for attachment
        handle = Instance.new("Part", workspace)
        handle.Name = "Handle"
        handle.Transparency = 1
        handle.CanCollide = false
        handle.Size = Vector3.new(2, 1, 1)
        
        weld = Instance.new("Weld", handle)
        weld.Part0 = handle
        weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart
        weld.C0 = CFrame.new(0, offset - 1.5, 0)

        -- Adjust camera and reposition character
        setDisplayDistance(offset + 100)
        workspace.CurrentCamera.CameraSubject = handle
        
        local character = game.Players.LocalPlayer.Character
        character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, offset, 0)
        character.Humanoid.HipHeight = offset
        character.Humanoid:ChangeState(11)

        -- Store original tool grips
        for _, child in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if child:IsA("Tool") and child ~= tool then
                grips[child] = child.Grip
            end
        end
    else
        invisible = false
        tool.Name = "Ghost: Disabled"

        -- Remove objects
        if handle then handle:Destroy() end
        if weld then weld:Destroy() end

        -- Return tools to backpack
        for _, child in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if child:IsA("Tool") then
                child.Parent = game.Players.LocalPlayer.Backpack
            end
        end

        -- Restore tool grips
        for tool, grip in pairs(grips) do
            if tool then
                tool.Grip = grip
            end
        end

        heldTool = nil
        setDisplayDistance(100)
        workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
        
        local character = game.Players.LocalPlayer.Character
        character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, -offset, 0)
        character.Humanoid.HipHeight = 0
    end
    tool.Parent = game.Players.LocalPlayer.Backpack
end)

-- Handling new tools appearing in character
game.Players.LocalPlayer.Character.ChildAdded:Connect(function(child)
    wait()
    if invisible and child:IsA("Tool") and child ~= heldTool and child ~= tool then
        heldTool = child
        local lastGrip = heldTool.Grip

        -- Save original grip
        if not grips[heldTool] then
            grips[heldTool] = lastGrip
        end

        -- Disable animations
        for _, track in pairs(game.Players.LocalPlayer.Character.Humanoid:GetPlayingAnimationTracks()) do
            track:Stop()
        end
        game.Players.LocalPlayer.Character.Animate.Disabled = true

        -- Modify tool grip
        heldTool.Grip = heldTool.Grip * (CFrame.new(0, offset - 1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
        heldTool.Parent = game.Players.LocalPlayer.Backpack
        heldTool.Parent = game.Players.LocalPlayer.Character

        -- Monitor grip changes
        if gripChanged then
            gripChanged:Disconnect()
        end

        gripChanged = heldTool:GetPropertyChangedSignal("Grip"):Connect(function()
            wait()
            if not invisible then
                gripChanged:Disconnect()
            end

            if heldTool.Grip ~= lastGrip then
                lastGrip = heldTool.Grip * (CFrame.new(0, offset - 1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
                heldTool.Grip = lastGrip
                heldTool.Parent = game.Players.LocalPlayer.Backpack
                heldTool.Parent = game.Players.LocalPlayer.Character
            end
        end)
    end
end)
